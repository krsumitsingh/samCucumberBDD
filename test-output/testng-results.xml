<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="4" total="8" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Suite" duration-ms="864" started-at="2020-09-05T18:37:51Z" finished-at="2020-09-05T18:37:52Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="864" started-at="2020-09-05T18:37:51Z" finished-at="2020-09-05T18:37:52Z">
      <class name="testScripts.Test2">
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testScripts.Test2@7c75222b]" name="beforeClass" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="login()[pri:0, instance:testScripts.Test2@7c75222b]" name="login" duration-ms="1" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test2@7c75222b]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test2.login()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test2@7c75222b]" name="afterMethod" is-config="true" duration-ms="51" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=Test2.login()[pri:0, instance:testScripts.Test2@7c75222b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test2@7c75222b]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test2.login4()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="login4()[pri:0, instance:testScripts.Test2@7c75222b]" name="login4" duration-ms="2" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.guru99demo.helper.assertions.AssertionHelper.fail(AssertionHelper.java:56)
	at testScripts.Test2.login4(Test2.java:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:822)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1130)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:113)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:206)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:177)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login4 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test2@7c75222b]" name="afterMethod" is-config="true" duration-ms="54" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login4 status=FAILURE method=Test2.login4()[pri:0, instance:testScripts.Test2@7c75222b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test2@7c75222b]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test2.login5()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="login5()[pri:0, instance:testScripts.Test2@7c75222b]" name="login5" duration-ms="2" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login5 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test2@7c75222b]" name="afterMethod" is-config="true" duration-ms="39" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login5 status=SUCCESS method=Test2.login5()[pri:0, instance:testScripts.Test2@7c75222b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test2@7c75222b]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test2.login6()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="login6()[pri:0, instance:testScripts.Test2@7c75222b]" name="login6" duration-ms="2" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.guru99demo.helper.assertions.AssertionHelper.fail(AssertionHelper.java:56)
	at testScripts.Test2.login6(Test2.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:822)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1130)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:113)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:206)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:177)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login6 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test2@7c75222b]" name="afterMethod" is-config="true" duration-ms="50" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login6 status=FAILURE method=Test2.login6()[pri:0, instance:testScripts.Test2@7c75222b] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.Test2 -->
      <class name="testScripts.Test1">
        <test-method status="PASS" signature="beforeSuite()[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeSuite" is-config="true" duration-ms="279" started-at="2020-09-06T00:07:51Z" finished-at="2020-09-06T00:07:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite -->
        <test-method status="PASS" signature="beforeClass()[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeClass" is-config="true" duration-ms="4" started-at="2020-09-06T00:07:51Z" finished-at="2020-09-06T00:07:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeMethod" is-config="true" duration-ms="7" started-at="2020-09-06T00:07:51Z" finished-at="2020-09-06T00:07:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test1.login()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="login()[pri:0, instance:testScripts.Test1@1cd072a9]" name="login" duration-ms="32" started-at="2020-09-06T00:07:51Z" finished-at="2020-09-06T00:07:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test1@1cd072a9]" name="afterMethod" is-config="true" duration-ms="356" started-at="2020-09-06T00:07:51Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login status=SUCCESS method=Test1.login()[pri:0, instance:testScripts.Test1@1cd072a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test1.login1()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="login1()[pri:0, instance:testScripts.Test1@1cd072a9]" name="login1" duration-ms="2" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.guru99demo.helper.assertions.AssertionHelper.fail(AssertionHelper.java:56)
	at testScripts.Test1.login1(Test1.java:16)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:822)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1130)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:113)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:206)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:177)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login1 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test1@1cd072a9]" name="afterMethod" is-config="true" duration-ms="95" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login1 status=FAILURE method=Test1.login1()[pri:0, instance:testScripts.Test1@1cd072a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test1.login2()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="login2()[pri:0, instance:testScripts.Test1@1cd072a9]" name="login2" duration-ms="4" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login2 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test1@1cd072a9]" name="afterMethod" is-config="true" duration-ms="75" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login2 status=SUCCESS method=Test1.login2()[pri:0, instance:testScripts.Test1@1cd072a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:testScripts.Test1@1cd072a9]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void testScripts.Test1.login3()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="login3()[pri:0, instance:testScripts.Test1@1cd072a9]" name="login3" duration-ms="1" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.guru99demo.helper.assertions.AssertionHelper.fail(AssertionHelper.java:56)
	at testScripts.Test1.login3(Test1.java:27)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:86)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:822)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1130)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:782)
	at org.testng.TestRunner.run(TestRunner.java:632)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:366)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:361)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:319)
	at org.testng.SuiteRunner.run(SuiteRunner.java:268)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1244)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
	at org.testng.TestNG.run(TestNG.java:1064)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:113)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:206)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:177)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login3 -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:testScripts.Test1@1cd072a9]" name="afterMethod" is-config="true" duration-ms="53" started-at="2020-09-06T00:07:52Z" finished-at="2020-09-06T00:07:52Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=login3 status=FAILURE method=Test1.login3()[pri:0, instance:testScripts.Test1@1cd072a9] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- testScripts.Test1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
